from crewai import Agent, Task, Crew

import os

from crewai_tools import SerperDevTool
os.environ["SERPER_API_KEY"] = "<SERPER API KEY>"

os.environ["OPENAI_API_KEY"] = "<OPENAI API KEY>"
os.environ["OPENAI_MODEL_NAME"] = 'gpt-3.5-turbo'

# Tools

search_tool = SerperDevTool()

# Agents

problem_analyzer = Agent(
    role="Problem Analyzer",
    goal="Understand the userâ€™s problem and extract programming constraints.",
    verbose=True,
    backstory="You are a seasoned problem analyst who clarifies vague prompts into concrete problems.",
)

code_generator = Agent(
    role="Code Generator",
    goal="Generate one or more implementations of code in the programming language specified for the given problem.",
    tools=[search_tool],
    verbose=True,
    backstory="You are a skilled software engineer who writes clear, functional code in multiple styles.",
)

complexity_analyzer = Agent(
    role="Complexity Analyzer",
    goal="Analyze time and space complexity of the generated code.",
    tools=[search_tool],
    verbose=True,
    backstory="You are an algorithm analyst with expertise in complexity theory and runtime behavior.",
)

code_optimizer = Agent(
    role="Code Optimizer",
    goal="Optimize code for time and space based on complexity findings.",
    tools=[search_tool],
    verbose=True,
    backstory="You are an algorithm expert with ability to improve performance and runtime efficiency.",
)

refactoring_agent = Agent(
    role="Refactoring Agent",
    goal="Polish the final implementation with modularization and clean formatting.",
    verbose=True,
    backstory="You are a meticulous software craftsman who ensures the final code is readable and production-ready.",
)

# Tasks

analyze_problem = Task(
    description="Analyze the problem_statement: ({problem_statement}). Identify significant input parameters and output formats",
    expected_output="A concise, structured summary of the problem and constraints.",
    agent=problem_analyzer,
    async_execution=False,
    human_input=False,
)

generate_code = Task(
    description="Based on the summary generated by the problem analyzer, generate a code implementation to solve the problem statement in the specified programming language: ({programming_language})",
    expected_output="Code implementation solving the problem",
    agent=code_generator,
    async_execution=False,
    context=[analyze_problem],
    human_input=True,
)

analyze_complexity = Task(
    description="Analyze the time and space complexity of the code",
    expected_output="Time and Space complexity of the code",
    agent=complexity_analyzer,
    async_execution=False,
    context=[generate_code],
    human_input=False,
)

optimize_code = Task(
    description="Optimize the code based on the algorithm complexity analysis",
    expected_output="Optimized version of code",
    agent=code_optimizer,
    async_execution=False,
    context=[generate_code, analyze_complexity],
    human_input=True,
)

refactor = Task(
    description="Refactor the final version of the optimized code",
    expected_output="Refactored code",
    agent=refactoring_agent,
    async_execution=False,
    context=[optimize_code],
    human_input=False,
)

# Crew

code_generator_crew = Crew(
    agents=[
        problem_analyzer,
        code_generator,
        complexity_analyzer,
        code_optimizer,
        refactoring_agent,
    ],
    tasks=[
        analyze_problem,
        generate_code,
        analyze_complexity,
        optimize_code,
        refactor,
    ],
    memory=False,
    verbose=True,
)

# Run
problem_statement = input("Problem Statement: ")
programming_language = input("Programming Language: ")

# problem_statement = "Search an element 'ele' in an array 'arr'. Return the index of the element"
# programming_language = "Python"

code_generation_inputs = {
    "problem_statement": problem_statement,
    "programming_language": programming_language,
}

result = code_generator_crew.kickoff(inputs=code_generation_inputs)

print(result)